@using TotalFireSafety.Models
@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/AdminLayout.cshtml";
    ViewBag.Dash = "active";
}

<div class="main-content">
    <header>
        <h2>
            <label for="nav-toggle">
                <span class="las la-bars"></span>
            </label>
            Overview

        </h2>

        <right>
           
            <div class="inv-sum-date">
                <div class="sum-date-con">
                    <label></label>
                    <input type="date" id="startDate">


                    <label>-</label>
                    <input type="date" id="endDate">
                </div>

            </div>


        </right>
    </header>

    <main>

        <!-- REMOVE CIRCLES -->
        @*<div class="summary">
            <center>
                <div class="summary-title">
                    <b>
                        Total Fire Safety Technologies Inc. Performance
                    </b>
                </div>

                <div class="sum-chart-card">
                    <div class="sum-cards">
                        <div class="sum-card-title">
                            <div class="sum-card-single">
                                <div class="sum-card-container">
                                    <div class="sum-card-details">
                                        <div class="cicle">
                                            <div class="circle-container">
                                                <div class="inv-circle-wrap">
                                                    <div class="inv-circle">
                                                        <div class="inv-mask inv-half">
                                                            <div class="inv">

                                                            </div>
                                                        </div>

                                                        <div class="inv-mask inv-full">
                                                            <div class="inv">

                                                            </div>
                                                        </div>

                                                    </div>

                                                    <div class="inv-inside-circle">
                                                        <label id="Inventory"></label>
                                                        <script>
                                                            var inventoryCount = @ViewBag.Inventory;
                                                            document.getElementById("Inventory").textContent = inventoryCount;
                                                        </script>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <h3>INVENTORY</h3>
                                </div>
                            </div>
                        </div>

                        <div class="sum-card-title">
                            <div class="sum-card-single">
                                <div class="sum-card-container">
                                    <div class="sum-card-details">
                                        <div class="cicle">
                                            <div class="circle-container">
                                                <div class="inv-circle-wrap">
                                                    <div class="inv-circle">
                                                        <div class="inv-mask inv-half">
                                                            <div class="inv">

                                                            </div>
                                                        </div>

                                                        <div class="inv-mask inv-full">
                                                            <div class="inv">

                                                            </div>
                                                        </div>

                                                    </div>

                                                    <div class="inv-inside-circle"> 170 </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <h3>NUMBER OF PROJECTS</h3>
                                </div>
                            </div>
                        </div>




                    </div>
                </div>
            </center>
        </div>*@

        <div class="cards">
            <div class="card-title">
                <a href="@Url.Action("Users","Admin")">
                    <h3>Users</h3>
                    <div class="card-single">
                        <div class="card-container">
                            <h3>Users</h3>
                            <div class="card-details">
                                <label id="dataCountLabel"></label><span>Total Users</span>
                                <script>
                             var dataCount = @ViewBag.DataCount;
                             document.getElementById("dataCountLabel").textContent = dataCount;
                                </script>
                                <p></p>
                                <label id="dataCountLabel1" class="card-active"></label><span class="card-active">Active Users</span>
                                <script>
                             var Active = @ViewBag.Active;
                             document.getElementById("dataCountLabel1").textContent = Active;
                                </script>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="card-title">
                <a href="@Url.Action("Requisition","Admin")">
                    <h3>Requisition</h3>
                    <div class="card-single">
                        <div class="card-container">
                            <h3>Purchase Request</h3>
                            <div class="card-details">
                                <label id="purchase"></label><span>Total Entries</span>
                                <script>
                                    var purchase = @ViewBag.Purchase;
                                    document.getElementById("purchase").textContent = purchase;
                                </script>
                                <p></p>
                                <label class="card-active" id="entries"></label><span class="card-active">Pending Entries</span>
                                <script>
                                    var entries = @ViewBag.Entries;
                                    document.getElementById("entries").textContent = entries;
                                </script>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="card-title">
                <a href="@Url.Action("Requisition","Admin")">
                    <h3>Deploy</h3>
                    <div class="card-single">
                        <div class="card-container">
                            <h3>Deployment Request</h3>
                            <div class="card-details">
                                <label id="deployment"></label><span>Total Entries</span>
                                <script>
                                    var deployment = @ViewBag.Deployment;
                                    document.getElementById("deployment").textContent = deployment;
                                </script>
                                <p></p>
                                <label class="card-active" id="entrieses"></label><span class="card-active">Pending Entries</span>
                                <script>
                                    var entrieses = @ViewBag.Entrieses;
                                    document.getElementById("entrieses").textContent = entrieses;
                                </script>
                            </div>
                        </div>
                    </div>
                </a>
            </div>

            <!-- NEW ADD CARD -->
            <div class="card-title">
                <a href="@Url.Action("Requisition","Admin")">
                    <h3>Supply</h3>
                    <div class="card-single">
                        <div class="card-container">
                            <h3>Supply Request</h3>
                            <div class="card-details">
                                <label id="supply"></label><span>Total Entries</span>
                                <script>
                                    var supply = @ViewBag.Supply;
                                    document.getElementById("supply").textContent = supply;
                                </script>
                                <p></p>
                                <label class="card-active" id="Sup"></label><span class="card-active">Pending Entries</span>
                                <script>
                                    var Sup = @ViewBag.Sup;
                                    document.getElementById("Sup").textContent = Sup;
                                </script>
                            </div>
                        </div>
                    </div>
                </a>
            </div>

        </div>

        <div class="recent-grid">

            <div class="inventory-sum">
                <div class="inv-sum-header">
                    <h3>Inventories</h3>
                </div>
                <div class="card">
                    <div class="card-header">


                        <h3>Item Categories Summary</h3>

                        <div  class="cat-grp">
                            <select id="class" required>
                                <option disabled selected>Item Class</option>
                                <option value="All">All</option>
                                <option value="Local">Local</option>
                                <option value="Import">Import</option>
                            </select>

                            <select id="itemCategory" required>
                                <option disabled selected>Item Category</option>
                                <option value="Fire Extinguisher">Fire Extinguisher</option>
                                <option value="Power Tools">Power Tools</option>
                                <option value="Fittings">Fittings</option>
                                <option value="Scaffolding">Scaffolding</option>
                                <option value="Others">Others</option>
                                <option value="Clear">Clear</option>
                            </select>
                        </div>

                        

                    </div>
                    <div class="chart-border">
                        <div class="chart">
                            <canvas id="barchart1" width="250" height="300"></canvas>
                            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                            <script>
                            var data = @Html.Raw(Json.Encode(ViewBag.Data));


                                var labels = data.map(function (item) {
                                    return item.Name;
                                });

                                // Get references to the select element and chart canvas
                              
                                var canvas = document.getElementById('barchart1');
                               

                                var itemCategory = document.getElementById('itemCategory');
                                itemCategory.addEventListener('change', function () {
                                    var selectedOption = itemCategory.value;
                                    var filteredData = data.filter(function (item) {
                                        return item.Category === selectedOption || selectedOption === 'Clear';
                                    });
                                    // update the chart data with the filtered data
                                    chart.data.labels = filteredData.map(item => item.Name);
                                    chart.data.datasets[0].data = filteredData.map(item => {
                                        if (item.Quantity < 50) {
                                            return item.Quantity;
                                        } else {
                                            return null;
                                        }
                                    });
                                    chart.data.datasets[1].data = filteredData.map(item => {
                                        if (item.Quantity >= 51 && item.Quantity <= 249) {
                                            return item.Quantity;
                                        } else {
                                            return null;
                                        }
                                    });
                                    chart.data.datasets[2].data = filteredData.map(item => {
                                        if (item.Quantity >= 250 && item.Quantity <= 5000) {
                                            return item.Quantity;
                                        } else {
                                            return null;
                                        }
                                    });
                                    chart.update();
                                });
                               
                                var itemClass = document.getElementById('class');
                                itemClass.addEventListener('change', function () {
                                    var selectedOption = itemClass.value;
                                    var filteredData1 = data.filter(function (item) {
                                        return item.Class === selectedOption || selectedOption === 'All';
                                    });
                                    // update the chart data with the filtered data
                                    chart.data.labels = filteredData1.map(item => item.Name);
                                    chart.data.datasets[0].data = filteredData1.map(item => {
                                        if (item.Quantity < 50) {
                                            return item.Quantity;
                                        } else {
                                            return null;
                                        }
                                    });
                                    chart.data.datasets[1].data = filteredData1.map(item => {
                                        if (item.Quantity >= 51 && item.Quantity <= 249) {
                                            return item.Quantity;
                                        } else {
                                            return null;
                                        }
                                    });
                                    chart.data.datasets[2].data = filteredData1.map(item => {
                                        if (item.Quantity >= 250 && item.Quantity <= 5000) {
                                            return item.Quantity;
                                        } else {
                                            return null;
                                        }
                                    });
                                    chart.update();
                                });
                                  
                                const startDateInput = document.getElementById('startDate');
                                const endDateInput = document.getElementById('endDate');

                                startDateInput.addEventListener('change', handleDateRangeChange);
                                endDateInput.addEventListener('change', handleDateRangeChange);

                                // function to handle the date range change
                                function handleDateRangeChange() {
                                    // get the start and end date values
                                    const startDate = new Date(startDateInput.value);
                                    const endDate = new Date(endDateInput.value);

                                    // filter the data based on the selected date range
                                    const filteredData2 = data.filter(item => {
                                        const date = new Date(item.Date);
                                        return date >= startDate && date <= endDate;
                                    });

                                    // update the chart with the filtered data
                                    updateChart(filteredData2);
                                }

                                // function to update the chart with new data
                                function updateChart(newData) {
                                    // update the chart data
                                    chart.data.labels = newData.map(item => item.Name);
                                    chart.data.datasets[0].data = newData.map(item => {
                                        if (item.Quantity < 50) {
                                            return item.Quantity;
                                        } else {
                                            return null;
                                        }
                                    });
                                    chart.data.datasets[1].data = newData.map(item => {
                                        if (item.Quantity >= 51 && item.Quantity <= 249) {
                                            return item.Quantity;
                                        } else {
                                            return null;
                                        }
                                    });
                                    chart.data.datasets[2].data = newData.map(item => {
                                        if (item.Quantity >= 250 && item.Quantity <= 5000) {
                                            return item.Quantity;
                                        } else {
                                            return null;
                                        }
                                    });

                                    // update the chart
                                    chart.update();
                                }

                                var criticalValues = data.map(function (item) {
                                    if (item.Quantity < 50) {
                                        return {
                                            value: item.Quantity,
                                            color: 'rgba(255,0,0)'
                                        };
                                    } else {
                                        return null;
                                    }
                                }).filter(Boolean);

                                var warningValues = data.map(function (item) {
                                    if (item.Quantity >= 51 && item.Quantity <= 249) {
                                        return {
                                            value: item.Quantity,
                                            color: 'rgba(255, 147, 47)'
                                        };
                                    } else {
                                        return null;
                                    }
                                }).filter(Boolean);

                                var goodValues = data.map(function (item) {
                                    if (item.Quantity >= 250 && item.Quantity <= 5000) {
                                        return {
                                            value: item.Quantity,
                                            color: 'rgba(0,128,0, 1)'
                                        };
                                    } else {
                                        return null;
                                    }
                                }).filter(Boolean);

                                var ctx = canvas.getContext('2d');
                                var chart = new Chart(ctx, {
                                    type: 'bar',
                                    data: {
                                        labels: data.map(item => item.Name),
                                        datasets: [
                                            {
                                                label: 'Critical',
                                                data: data.map(item => {
                                                    if (item.Quantity < 50) {
                                                        return item.Quantity;
                                                    } else {
                                                        return null;
                                                    }
                                                }),
                                                backgroundColor: criticalValues.map(item => item.color),
                                                borderColor: 'rgba(255,0,0)',
                                                borderWidth: 1
                                            },
                                            {
                                                label: 'Warning',
                                                data: data.map(item => {
                                                    if (item.Quantity >= 51 && item.Quantity <= 249) {
                                                        return item.Quantity;
                                                    } else {
                                                        return null;
                                                    }
                                                }),
                                                backgroundColor: warningValues.map(item => item.color),
                                                borderColor: 'rgba(255, 147, 47)',
                                                borderWidth: 1
                                            },
                                            {
                                                label: 'Good',
                                                data: data.map(item => {
                                                    if (item.Quantity >= 250 && item.Quantity <= 5000) {
                                                        return item.Quantity;
                                                    } else {
                                                        return null;
                                                    }
                                                }),
                                                backgroundColor: goodValues.map(item => item.color),
                                                borderColor: 'rgba(0,128,0, 1)',
                                                borderWidth: 1
                                            }
                                        ]
                                    },
                                    options: {
                                        responsive: true,
                                        plugins: {
                                            legend: {
                                                display: false
                                            }
                                        },
                                        stacked: false,
                                        maintainAspectRatio: false,
                                        aspectRatio: 4 / 4,
                                        scales: {
                                            yAxes: [{
                                                ticks: {
                                                    beginAtZero: true
                                                },
                                                maxBarThickness: 100 // set this to a value that works for your chart
                                            }]
                                        }
                                    }
                                });

                            </script>

                        </div>
                    </div>

                    <div class="card-headers">
                        <a href="@Url.Action("Inventory","Admin")"><button> See more <span class="las la-arrow-right"></span></button></a>
                        <div class="legend-grp">
                            <div class="legend-content">
                                <h3>Legend: </h3>
                                <div class="legend-content-1">
                                    <div class="legend-color">

                                    </div>
                                    <label> Standard </label>
                                </div>

                                <div class="legend-content-2">
                                    <div class="legend-color">

                                    </div>
                                    <label> Average </label>
                                </div>

                                <div class="legend-content-3">
                                    <div class="legend-color">

                                    </div>
                                    <label> Critical </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="inventory-sum">
                <h3>&nbsp;</h3>
                <div class="card">
                    <div class="card-header">
                        <h3>Most Requested Item</h3>

                        <div class="fst-grp">
                            <select id="moving" required>
                                <option disabled selected>Choose</option>
                                <option id="fast">Fast Moving Item</option>
                                <option id="slow">Slow Moving Item</option>
                            </select>
                        </div>
                        <div class="project-sum-btns"></div>
                    </div>

                    <div class="chart-borders">
                        <div class="chart">
                            <div class="scatter">
                                <canvas id="barcharthori1" width="auto" height="auto"></canvas>

                                <script>
                                    var data1 = @Html.Raw(Json.Encode(ViewBag.Chart));
                                    var labels1 = data1.map(function (item) {
                                        return item.Name1;
                                    });

                                    var values1 = data1.map(function (item) {
                                        return item.Quantity1;
                                    });

                                    var select = document.getElementById('moving');
                                    select.addEventListener('change', function () {
                                        var selectedOption = select.options[select.selectedIndex].id;
                                        if (selectedOption === 'fast') {
                                            Chart.data.datasets[0].data = null; // set slow moving data to null
                                            Chart.data.datasets[1].data = data1.map(item => {
                                                if (item.Quantity1 >= 51 && item.Quantity1 <= 5000) {
                                                    return item.Quantity1;
                                                } else {
                                                    return null;
                                                }
                                            }); // set fast moving data
                                        } else if (selectedOption === 'slow') {
                                            Chart.data.datasets[0].data = data1.map(item => {
                                                if (item.Quantity1 <= 50) {
                                                    return item.Quantity1;
                                                } else {
                                                    return null;
                                                }
                                            }); // set slow moving data
                                            Chart.data.datasets[1].data = null; // set fast moving data to null
                                        }

                                        Chart.update();
                                    });

                                    // function to update the chart with new data
                                  @*  const startDateInput1 = document.getElementById('startDate');
                                    const endDateInput1 = document.getElementById('endDate');

                                    startDateInput1.addEventListener('change', handleDateRangeChange);
                                    endDateInput1.addEventListener('change', handleDateRangeChange);

                                    // function to handle the date range change
                                    function handleDateRangeChange() {
                                        // get the start and end date values
                                        const startDate = new Date(startDateInput.value);
                                        const endDate = new Date(endDateInput.value);

                                        // filter the data based on the selected date range
                                        const filteredData3 = data.filter(item => {
                                            const date = new Date(item.Date);
                                            return date >= startDate && date <= endDate;
                                        });

                                        // update the chart with the filtered data
                                        updateChart(filteredData3);
                                    }

                                    // function to update the chart with new data
                                    function updateChart(newData1) {
                                        // update the chart data
                                        chart.data.labels = newData1.map(item => item.Name1);
                                        chart.data.datasets[0].data = newData1.map(item => {
                                            if (item.Quantity1 < 50) {
                                                return item.Quantity1;
                                            } else {
                                                return null;
                                            }
                                        });
                                        chart.data.datasets[1].data = newData1.map(item => {
                                            if (item.Quantity1 >= 51) {
                                                return item.Quantity1;
                                            } else {
                                                return null;
                                            }

                                        });
                                            // update the chart
                                            chart.update();
                                        }*@
                                            


                                    
                                    var Slowmoving = data1.map(function (item) {
                                        if (item.Quantity1 <= 50) {
                                            return {
                                                value: item.Quantity1,
                                                color: 'rgba(255, 147, 47)',
                                                
                                            };
                                        }
                                    }).filter(Boolean);

                                    var Fastmoving = data1.map(function (item) {
                                        if (item.Quantity1 >= 51 && item.Quantity1 <= 5000) {
                                            return {
                                                value: item.Quantity1,
                                                color: 'rgba(0,128,0, 1)',
                                               
                                            };
                                        }
                                    }).filter(Boolean);

                                    var ctx = document.getElementById('barcharthori1').getContext('2d');
                                    var Chart = new Chart(ctx, {
                                        type: 'bar',
                                        data: {
                                            labels: data1.map(item => item.Name1),
                                            datasets: [
                                                
                                                {
                                                    label: 'Slow Moving',
                                                    data: data1.map(item => {
                                                        if (item.Quantity1 <= 50) {
                                                            return item.Quantity1;
                                                        } else {
                                                            return null;
                                                        }
                                                    }),
                                                    backgroundColor: Slowmoving.map(item => item.color),
                                                    borderColor: 'rgba(255, 147, 47)',
                                                    borderWidth: 1
                                                },
                                                {
                                                    label: 'Fast Moving',
                                                    data: data1.map(item => {
                                                        if (item.Quantity1 >= 51) {
                                                            return item.Quantity1;
                                                        } else {
                                                            return null;
                                                        }
                                                    }),
                                                    backgroundColor: Fastmoving.map(item => item.color),
                                                    borderColor: 'rgba(0,128,0, 1)',
                                                    borderWidth: 1
                                                }
                                            ]
                                        },
                                        options: {
                                            indexAxis: 'y',
                                            responsive: true,
                                            maintainAspectRatio: false,
                                            aspectRatio: 4 / 3,
                                            plugins: {
                                                legend: {
                                                    display: false
                                                }
                                            },
                                            scales: {
                                                yAxes: [{
                                                    ticks: {
                                                        beginAtZero: true
                                                    }
                                                }]
                                            }
                                        }
                                    });
                                </script>
                            </div>

                        </div>
                    </div>

                    <div class="card-headers">
                        <div class="fst-legend-content">
                            <div class="fst-content-1">

                            </div>
                            <label> Fast Moving Item </label>
                            <div class="slw-content-1">

                            </div>
                            <label> Slow Moving Item </label>
                        </div>

                        <label class="fst-date"></label>
                    </div>

                </div>
            </div>


        </div>

        <!-- Project Summary -->

        <br>

        <div class="project-sum">
            <h3>PROJECT SUMMARY</h3>               
        </div>

        <div class="dsh-projects">
            <div class="dsh">
                <div class="drp-wrapper">
                    <select required>
                        <option disabled selected>Project Status</option>
                        <option>On-going</option>
                        <option>In-line</option>
                        <option>Delayed</option>
                    </select>

                    <select required>
                        <option disabled selected>Project Lead</option>
                        <option>Clarisse Vasquez</option>
                    </select>
                </div>
                <div class="dsh-body">
                    <div class="table-responsive" style="overflow-x: auto;">
                        <table width="100%">
                            <thead>
                                <tr>
                                    <td>Project Name</td>
                                    <td>Project Lead</td>
                                    <td>Start Date</td>
                                    <td>Status</td>
                                    <td>Tracker</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Makati Global</td>
                                    <td>Jewell Mayrena</td>
                                    <td>Feb 27, 2023</td>
                                    <td><label class="stat-pen">In-Line</label></td>
                                    <td>
                                        <div class="progress-bar">
                                            <div class="progress-complete">
                                            </div>
                                        </div>
                                    </td>
                                </tr>

                                <tr>
                                    <td>Mang Inasal QCU</td>
                                    <td>Fernan Yuki</td>
                                    <td>Feb 12, 2023</td>
                                    <td><label class="stat-appr">On-Going</label></td>
                                    <td>
                                        <div class="progress-bar">
                                            <div class="progress-half">
                                            </div>
                                        </div>
                                    </td>
                                </tr>

                                <tr>
                                    <td>Golden Disk</td>
                                    <td>Carlo Millonte</td>
                                    <td>Jan 27, 2023</td>
                                    <td><label class="stat-appr">On-Going</label></td>
                                    <td>
                                        <div class="progress-bar">
                                            <div class="progress-halfhalf">
                                            </div>
                                        </div>
                                    </td>
                                </tr>

                                <tr>
                                    <td>Jollibee South Branch</td>
                                    <td>Clark Steven Arcilla</td>
                                    <td>Feb 23, 2023</td>
                                    <td><label class="stat-dec">Declined</label></td>
                                    <td>
                                        <div class="progress-bar">
                                            <div class="progress-nothalf">
                                            </div>
                                        </div>
                                    </td>
                                </tr>

                                <tr>
                                    <td>Jollibee South Branch</td>
                                    <td>Clark Steven Arcilla</td>
                                    <td>Feb 23, 2023</td>
                                    <td><label class="stat-dec">Declined</label></td>
                                    <td>
                                        <div class="progress-bar">
                                            <div class="progress-nothalf">
                                            </div>
                                        </div>
                                    </td>
                                </tr>


                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="proj-legend-grp">
                    <div class="proj-legend-content">
                        <h3>Legend: </h3>
                        <div class="proj-legend-content-1">
                            <div class="legend-color">

                            </div>
                            <label> Ongoing </label>
                        </div>
                        <div class="proj-legend-content-2">
                            <div class="legend-color">

                            </div>
                            <label> Delayed </label>
                        </div>

                        <div class="proj-legend-content-3">
                            <div class="legend-color">

                            </div>
                            <label> Inline </label>
                        </div>
                    </div>
                </div>

            </div>
        </div>


    </main>
</div>

@*<script src="../js/chart1.js"></script>
    <script src="../js/chart3.js"></script>*@
@Scripts.Render("~/script/admin")



<script>
    `use strict`;
    //function refreshTime() {
    //    const timeDisplay = document.getElementById("dt");
    //    const dateString = new Date().toLocaleString();
    //    const formattedString = dateString.replace(", ", " - ");
    //    timeDisplay.textContent = formattedString;
    //}
    //setInterval(refreshTime, 0);


    var dropdown = document.getElementsByClassName("oper-dropdown-bt");
    var i;

    for (i = 0; i < dropdown.length; i++) {
        dropdown[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var dropdownContent = this.nextElementSibling;
            if (dropdownContent.style.display === "block") {
                dropdownContent.style.display = "none";
            } else {
                dropdownContent.style.display = "block";
            }
        });
    }

    /* When the user clicks on the button,
       toggle between hiding and showing the dropdown content */
   

</script>
